building from scratch...
npm is a node package manager but it doesn't stands for node package manager- fact
package.json is configuration for npm
packages and dependecies has same meaning
most important package - bundler(eg. webpack,parcel,wheat)
we are using parcel - it is a beast

dev dependecies - required for development phase.
normal dependecies - can be used in development and as well as or prod server

transitive dependecies - a dependecies installed for a dependecy

npm is to install
we have npx means executing a package

CDN not a good way: make a network call, having it in node modules is better.

PARCEL:
HMR = Hot module replacement.
Parcel - File watching algorithm which is written in C++.
faster builds - caching.
Image Optimization
Minification
Bundling
Compressing
Consistent Hashing
Remove unused code

JSX is not html
JSX - Javascript XML - it is not html inside js : it is html like syntax like XML.
JSX is transpiled before it reaches to js engine ---> PARCEL ----> Babel here is main character

If we write JSX in multiple line we have to use paranthesis

Components: 

// React Element

const heading = React.createElement(
  "h1",
  { id: "heading" },
  "Namaste React ðŸš€"
);
console.log(heading);
//JSX - Javascript XML - it is not html inside js

//below is the react element
const jsxHeading = <h1 id="heading">This is a React Element</h1>; // it is converted to React.element //Babel is converter

//React Component
//React Functional Component

const Title = () => (
  <div>
    <h1 id="head">{jsxHeading}Title - This is a React Functional Component</h1>
  </div>
); // we can use return here

const number = 1000;
// Component Composition
const HeadingComponent = () => {
  return (
    <div id="container">
      <Title />
      <h1>Namaste React Functional Component</h1>
    </div>
  );
};

Types:
Class based Components - OLD Way - Will learn later
Functional components - NEW Way

Feature: you can add {} in JSX code and execte any Javascript code inside {}.


Food App:

Components: 
1. Header
    - Logo
    - Nav Items
2. Body
    - Search
    - Restaurant Container
        - Restaurant Card
            - img
            - Name of Restaurant
            - Star Rating
            - Cuisine
            - Time
3. Footer
    - Copyright
    - link
    - Address
    - Contact


Props to a component = arguments to a function;

config driven UI - Website driven by data from backend API;

always give a key={uniqueKey} if we loop through the same component that we need to use multiple times.
eg: {resList.map((restaurant) => (
          <RestaurantCard key={restaurant.info.id} resData={restaurant} />
        ))}

reason: if we give a key react will only render that perticular component, it will not render all components again and again.

React says that never use indexes as the keys

Hooks ----- 
A Hook Is Normal Javascript variable given by react developers with some logic written behing the scenes.
2 very important Hooks
-useState() --- 80% Used - Superpowerful State Variables
  -- whenever a state variable updates it re-renders the component.
  Best Practice for use State
  -- Never use useState outside if your component.  
  -- call hooks on top in the function.
  -- never create a useState inside in conditions of if else or for loops and functions.
-useEffect() ---- 15%
  -- called after each render if no dependency array is present.
  -- if dependecy array is empty [] - use effect is called on initial render - just once.
  -- if depecndeny array has value [btnReact] - called everytime when btnReact will be updated.

Why react is faster --> 

Efficient DOM Manipulation by

reconciliation algorithm -> (react fibre(React 16 - new algo)) ----> React Virtual DOM is a representation of actual DOM (React Create Element) ---> just a JS object.

Diff Algo: Before Click --> 7 cards : after Click ---> 3 cards ---> It finds the difference between old Virtual DOM and new Virtual DOM and
          It converts the Virtual DOM into actual DOM in 1 render cycle.
 


whenever a state variable updates react re-renders the whole component.